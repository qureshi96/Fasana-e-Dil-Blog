{"ast":null,"code":"import _asyncToGenerator from \"/Users/usman/Documents/GitHub/Fasana-e-Dil-Blog/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, signOut, onAuthStateChanged } from 'firebase/auth';\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/auth\";\nexport let UserAuthService = /*#__PURE__*/(() => {\n  class UserAuthService {\n    constructor(auth) {\n      this.auth = auth;\n      this.user = new BehaviorSubject(null);\n      this.logoutclicked = false;\n      this.loginclicked = false;\n      this.initAuthListener();\n    }\n\n    googleSignIn() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        const provider = new GoogleAuthProvider();\n        provider.setCustomParameters({\n          prompt: 'select_account'\n        });\n\n        try {\n          const result = yield signInWithPopup(getAuth(), provider); // Use result.user here\n\n          _this.logoutclicked = false;\n          _this.loginclicked = true;\n          return result;\n        } catch (error) {\n          console.error(error); // Handle errors here\n        }\n      })();\n    }\n\n    logout() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          yield signOut(getAuth());\n          _this2.loginclicked = false;\n          _this2.logoutclicked = true;\n        } catch (error) {\n          console.error(\"failed\", error);\n        }\n      })();\n    }\n\n    initAuthListener() {\n      const auth = getAuth();\n      onAuthStateChanged(auth, user => {\n        if (user) {\n          this.user.next(user);\n        } else {\n          this.user.next(null);\n        }\n      });\n    }\n\n    getUser() {\n      return this.user.asObservable();\n    }\n\n  }\n\n  UserAuthService.ɵfac = function UserAuthService_Factory(t) {\n    return new (t || UserAuthService)(i0.ɵɵinject(i1.AngularFireAuth));\n  };\n\n  UserAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserAuthService,\n    factory: UserAuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserAuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}