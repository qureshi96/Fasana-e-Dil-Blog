{"ast":null,"code":"import { Observable, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n  return new Observable(subscriber => {\n    let fn = null;\n    fn = ref[listenType](event, (snapshot, prevKey) => {\n      scheduler.schedule(() => {\n        subscriber.next({\n          snapshot,\n          prevKey\n        });\n      });\n\n      if (listenType == 'once') {\n        scheduler.schedule(() => subscriber.complete());\n      }\n    }, err => {\n      scheduler.schedule(() => subscriber.error(err));\n    });\n\n    if (listenType == 'on') {\n      return {\n        unsubscribe() {\n          if (fn != null) {\n            ref.off(event, fn);\n          }\n        }\n\n      };\n    } else {\n      return {\n        unsubscribe() {}\n\n      };\n    }\n  }).pipe(map(payload => {\n    const {\n      snapshot,\n      prevKey\n    } = payload;\n    let key = null;\n\n    if (snapshot.exists()) {\n      key = snapshot.key;\n    }\n\n    return {\n      type: event,\n      payload: snapshot,\n      prevKey,\n      key\n    };\n  }), share());\n}","map":{"version":3,"names":["Observable","asyncScheduler","map","share","fromRef","ref","event","listenType","scheduler","subscriber","fn","snapshot","prevKey","schedule","next","complete","err","error","unsubscribe","off","pipe","payload","key","exists","type"],"sources":["/Users/usman/Documents/GitHub/Fasana-e-Dil-Blog/node_modules/angularfire2/node_modules/@angular/fire/__ivy_ngcc__/database/es2015/observable/fromRef.js"],"sourcesContent":["import { Observable, asyncScheduler } from 'rxjs';\nimport { map, share } from 'rxjs/operators';\nexport function fromRef(ref, event, listenType = 'on', scheduler = asyncScheduler) {\n    return new Observable(subscriber => {\n        let fn = null;\n        fn = ref[listenType](event, (snapshot, prevKey) => {\n            scheduler.schedule(() => {\n                subscriber.next({ snapshot, prevKey });\n            });\n            if (listenType == 'once') {\n                scheduler.schedule(() => subscriber.complete());\n            }\n        }, err => {\n            scheduler.schedule(() => subscriber.error(err));\n        });\n        if (listenType == 'on') {\n            return {\n                unsubscribe() {\n                    if (fn != null) {\n                        ref.off(event, fn);\n                    }\n                }\n            };\n        }\n        else {\n            return { unsubscribe() { } };\n        }\n    }).pipe(map(payload => {\n        const { snapshot, prevKey } = payload;\n        let key = null;\n        if (snapshot.exists()) {\n            key = snapshot.key;\n        }\n        return { type: event, payload: snapshot, prevKey, key };\n    }), share());\n}\n"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,MAA3C;AACA,SAASC,GAAT,EAAcC,KAAd,QAA2B,gBAA3B;AACA,OAAO,SAASC,OAAT,CAAiBC,GAAjB,EAAsBC,KAAtB,EAA6BC,UAAU,GAAG,IAA1C,EAAgDC,SAAS,GAAGP,cAA5D,EAA4E;EAC/E,OAAO,IAAID,UAAJ,CAAeS,UAAU,IAAI;IAChC,IAAIC,EAAE,GAAG,IAAT;IACAA,EAAE,GAAGL,GAAG,CAACE,UAAD,CAAH,CAAgBD,KAAhB,EAAuB,CAACK,QAAD,EAAWC,OAAX,KAAuB;MAC/CJ,SAAS,CAACK,QAAV,CAAmB,MAAM;QACrBJ,UAAU,CAACK,IAAX,CAAgB;UAAEH,QAAF;UAAYC;QAAZ,CAAhB;MACH,CAFD;;MAGA,IAAIL,UAAU,IAAI,MAAlB,EAA0B;QACtBC,SAAS,CAACK,QAAV,CAAmB,MAAMJ,UAAU,CAACM,QAAX,EAAzB;MACH;IACJ,CAPI,EAOFC,GAAG,IAAI;MACNR,SAAS,CAACK,QAAV,CAAmB,MAAMJ,UAAU,CAACQ,KAAX,CAAiBD,GAAjB,CAAzB;IACH,CATI,CAAL;;IAUA,IAAIT,UAAU,IAAI,IAAlB,EAAwB;MACpB,OAAO;QACHW,WAAW,GAAG;UACV,IAAIR,EAAE,IAAI,IAAV,EAAgB;YACZL,GAAG,CAACc,GAAJ,CAAQb,KAAR,EAAeI,EAAf;UACH;QACJ;;MALE,CAAP;IAOH,CARD,MASK;MACD,OAAO;QAAEQ,WAAW,GAAG,CAAG;;MAAnB,CAAP;IACH;EACJ,CAxBM,EAwBJE,IAxBI,CAwBClB,GAAG,CAACmB,OAAO,IAAI;IACnB,MAAM;MAAEV,QAAF;MAAYC;IAAZ,IAAwBS,OAA9B;IACA,IAAIC,GAAG,GAAG,IAAV;;IACA,IAAIX,QAAQ,CAACY,MAAT,EAAJ,EAAuB;MACnBD,GAAG,GAAGX,QAAQ,CAACW,GAAf;IACH;;IACD,OAAO;MAAEE,IAAI,EAAElB,KAAR;MAAee,OAAO,EAAEV,QAAxB;MAAkCC,OAAlC;MAA2CU;IAA3C,CAAP;EACH,CAPU,CAxBJ,EA+BHnB,KAAK,EA/BF,CAAP;AAgCH"},"metadata":{},"sourceType":"module"}